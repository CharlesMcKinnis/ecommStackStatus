#!/usr/bin/env python

import stackreconlib
from stackreconlib import (daemon_exe, importfile, )
import socket

VERSION = 2016112201
"""
The script will look for apache, nginx and php-fpm binaries in memory, and
identify their configuration source. 

A list of config files is printed to the screen
"""
daemons = daemon_exe(["httpd", "apache2", "nginx", "httpd.event",
                      "httpd.worker", "php-fpm",
                      "php5-fpm", "php-fpm-5.4", "php-fpm-5.5",
                      "php-fpm-5.6", "php-fpm-7.0"])
for i in daemons:
    if daemons.get(i, {}).get("error"):
        print(daemons[i]["error"])
localfqdn = socket.getfqdn()


# using this as a bookmark in the IDE
def APACHE_DATA_GATHER():
    pass
################################################
# APACHE
################################################
apache_exe = ""
# what if they have multiple apache daemons on different MPMs?
alt_daemon_names = ["apache2", "httpd", "httpd.event", "httpd.worker"]
daemon_name = list(set(alt_daemon_names).intersection(daemons.keys()))
if len(daemon_name) > 1:
    print("More than one version of Apache is running %r. "
          "Using %s" %
          (daemon_name, daemon_name[0]))
    pass
elif len(daemon_name) == 1:
    apache_basename = daemons[daemon_name[0]]["basename"]
    apache_exe = daemons[daemon_name[0]]["exe"]
    apache = stackreconlib.apacheCtl(daemons[daemon_name[0]],
                                     exe=daemons[daemon_name[0]]["exe"])
    apache.figlet()
if apache_exe:
    apache_conf_file = apache.get_conf()
    apache_root_path = apache.get_root()
    apache_mpm = apache.get_mpm()
    if apache_conf_file and apache_root_path:
        print("Using config %s" % apache_conf_file)
        return_dict = importfile(apache_conf_file,
                                 '\s*include(?:optional?)?\s+[\'"]?([^\s\'"]+)[\'"]?',
                                 base_path=apache_root_path)
        wholeconfig = return_dict["combined"]
        # print "file list: %r" % return_dict["config_files_list"]

    for file in return_dict["config_files_list"]:
        print file


# using this as a bookmark in the IDE
def NGINX_DATA_GATHER():
    pass
# nginx.figlet()
################################################
# NGINX
################################################
if "nginx" in daemons:
    nginx = stackreconlib.nginxCtl(daemons["nginx"],
                                   exe=daemons["nginx"]["exe"])
    nginx.figlet()
    nginx_conf_file = nginx.get_conf()
    if nginx_conf_file:
        # configuration fetch and parse
        return_dict = importfile(nginx_conf_file, '\s*include\s+(\S+);')
        wholeconfig = return_dict["combined"]
        # print "file list: %r" % return_dict["config_files_list"]

    for file in return_dict["config_files_list"]:
        print file


# using this as a bookmark in the IDE
def PHP_FPM_DATA_GATHER():
    pass
################################################
# PHP-FPM
################################################

daemon_exe = ""  # to fix not defined
# php-fpm executable name is different between distros and versions.
# daemon_exe catches them all, but then we need to narrow down the
#   names for this specific daemon
alt_daemon_names = ["php-fpm", "php5-fpm", "php-fpm-5.4", "php-fpm-5.5",
                    "php-fpm-5.6", "php-fpm-7.0"]
daemon_name = list(set(alt_daemon_names).intersection(daemons.keys()))
# print "324 alt daemon names %r" % alt_daemon_names
# print "325 web daemon %r" % daemon_name[0]
# print "326 daemons %r" % daemons.keys()
# print "Version(s) of Apache is running %r. Using %s\n" % (daemon_name,
#                                                           daemon_name[0])
if len(daemon_name) > 1:
    # print "More than one version of Apache is running."
    print("More than one version of php-fpm is running %r. "
          "Using %s" % (daemon_name, daemon_name[0]))
elif len(daemon_name) == 1:
    phpfpm = stackreconlib.phpfpmCtl(daemons[daemon_name[0]],
                                     exe=daemons[daemon_name[0]]["exe"])
    phpfpm.figlet()
    phpfpm_conf_file = phpfpm.get_conf()
    if phpfpm_conf_file:
        return_dict = importfile(phpfpm_conf_file,
                                 '\s*include[\s=]+(\S+)')
        wholeconfig = return_dict["combined"]
        # print "file list: %r" % return_dict["config_files_list"]
    for file in return_dict["config_files_list"]:
        print file
